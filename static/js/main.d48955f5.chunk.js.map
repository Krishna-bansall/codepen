{"version":3,"sources":["components/editor/index.js","hooks/useLocalStorage.js","components/App.js","index.js"],"names":["Editor","displayName","language","value","onChange","useState","open","setOpen","className","type","onClick","e","icon","faCompressAlt","faExpandAlt","onBeforeChange","eidtor","data","options","lint","lineNumbers","lineWrapping","theme","mode","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","width","frameborder","ReactDOM","render","document","getElementById"],"mappings":"uOAkDeA,MAtCf,YAA6D,IAA3CC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC9C,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGP,EACD,wBACEQ,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAACI,GAAD,OAAQA,MAHjC,SAKE,cAAC,IAAD,CACEC,KAAMN,EAAOO,IAAgBC,WAKnC,cAAC,aAAD,CACEC,eApBe,SAACC,EAAQC,EAAMd,GAClCC,EAASD,IAoBLA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACPC,MAAM,EACNC,aAAa,EACbC,cAAc,EACdC,MAAO,WACPC,KAAMrB,SCvCD,SAASsB,EAAgBC,EAAKC,GAC3C,IAAMC,EAHO,iBAGgBF,EAE7B,EAA0BpB,oBAAS,WACjC,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBF,EACFA,IAEAA,KAPX,mBAAOvB,EAAP,KAAc8B,EAAd,KAeA,OAJAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAChD,CAACwB,EAAaxB,IAEV,CAACA,EAAO8B,GCuCFI,MA1Df,WACE,MAAwBb,EAAgB,OAAQ,IAAhD,mBAAOc,EAAP,KAAaC,EAAb,KACA,EAAsBf,EAAgB,MAAO,IAA7C,mBAAOgB,EAAP,KAAYC,EAAZ,KACA,EAAoBjB,EAAgB,KAAM,IAA1C,mBAAOkB,EAAP,KAAWC,EAAX,KACA,EAA4BtC,mBAAS,IAArC,mBAAOuC,EAAP,KAAeC,EAAf,KAmBA,OAjBAX,qBAAU,WACR,IAAMY,EAAUC,YAAW,WACzBF,EAAU,gEAAD,OAGDP,EAHC,iCAIAE,EAJA,mCAKCE,EALD,wCAQR,KAEH,OAAO,WACLM,aAAaF,MAEd,CAACR,EAAME,EAAKE,IAGb,qCACE,sBAAKlC,UAAU,gBAAf,UACE,cAAC,EAAD,CACEP,YAAY,OACZE,MAAOmC,EACPlC,SAAUmC,EACVrC,SAAS,QAEX,cAAC,EAAD,CACED,YAAY,MACZE,MAAOqC,EACPpC,SAAUqC,EACVvC,SAAS,QAEX,cAAC,EAAD,CACED,YAAY,aACZE,MAAOuC,EACPtC,SAAUuC,EACVzC,SAAS,kBAGb,qBAAKM,UAAU,OAAf,SACE,wBACEyC,MAAM,SACNC,QAAQ,gBACRN,OAAQA,EACRO,MAAM,OACNC,YAAY,YCjDtBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.d48955f5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nimport \"codemirror/theme/material.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/mode/xml/xml\";\nimport \"codemirror/mode/javascript/javascript\";\nimport \"codemirror/mode/css/css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCompressAlt, faExpandAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nimport { Controlled as ControlledEditor } from \"react-codemirror2\";\n\nfunction Editor({ displayName, language, value, onChange }) {\n  const [open, setOpen] = useState(true);\n\n  const handleChange = (eidtor, data, value) => {\n    onChange(value);\n  };\n\n  return (\n    <div className={`editor-container ${open ? \"\" : \"collapsed\"}`}>\n      <div className=\"editor-title\">\n        {displayName}\n        <button\n          type=\"button\"\n          className=\"expand-collapse-btn\"\n          onClick={() => setOpen((e) => !e)}\n        >\n          <FontAwesomeIcon\n            icon={open ? faCompressAlt : faExpandAlt}\n          ></FontAwesomeIcon>\n        </button>\n      </div>\n\n      <ControlledEditor\n        onBeforeChange={handleChange}\n        value={value}\n        className=\"code-mirror-wrapper\"\n        options={{\n          lint: true,\n          lineNumbers: true,\n          lineWrapping: true,\n          theme: \"material\",\n          mode: language,\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Editor;\n","import { useEffect, useState } from \"react\";\n\nconst PREFIX = \"codepen-clone-\";\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key;\n\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey);\n    if (jsonValue != null) return JSON.parse(jsonValue);\n\n    if (typeof initialValue === \"function\") {\n      return initialValue();\n    } else {\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value));\n  }, [prefixedKey, value]);\n\n  return [value, setValue];\n}\n","import React, { useState, useEffect } from \"react\";\nimport Editor from \"./editor\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nfunction App() {\n  const [html, setHtml] = useLocalStorage(\"html\", \"\");\n  const [css, setCss] = useLocalStorage(\"css\", \"\");\n  const [js, setJs] = useLocalStorage(\"js\", \"\");\n  const [srcDoc, setSrcDoc] = useState(\"\");\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(`\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <body>${html}</body>\n      <style>${css}</style>\n      <script>${js}</script>\n      </html>\n      `);\n    }, 250);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [html, css, js]);\n\n  return (\n    <>\n      <div className=\"pane top-pane\">\n        <Editor\n          displayName=\"HTML\"\n          value={html}\n          onChange={setHtml}\n          language=\"xml\"\n        />\n        <Editor\n          displayName=\"CSS\"\n          value={css}\n          onChange={setCss}\n          language=\"css\"\n        />\n        <Editor\n          displayName=\"JAVASCRIPT\"\n          value={js}\n          onChange={setJs}\n          language=\"javascript\"\n        />\n      </div>\n      <div className=\"pane\">\n        <iframe\n          title=\"output\"\n          sandbox=\"allow-scripts\"\n          srcDoc={srcDoc}\n          width=\"100%\"\n          frameborder=\"0\"\n        ></iframe>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./components/App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}